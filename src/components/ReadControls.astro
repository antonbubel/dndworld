---
import { ArrowLeft, ArrowRight } from "lucide-astro";
---

<div
  class="w-full flex flex-col-reverse lg:flex-row justify-between gap-2 lg:gap-4 flex-wrap-reverse"
>
  <a
    id="prev-page"
    href="#"
    class="btn h-full flex flex-nowrap py-2 no-underline"
  >
    <ArrowLeft size="15" />
    <div class="flex flex-col items-start">
      <span class="text-[0.55rem]">Предыдущее:</span>
      <span class="text-xs page-name break-words text-left">...</span>
    </div>
  </a>

  <a
    id="next-page"
    href="#"
    class="btn h-full lg:ml-auto flex flex-nowrap py-2 no-underline"
  >
    <div class="flex flex-col items-start">
      <span class="text-[0.55rem]">Следующее:</span>
      <span class="text-xs page-name break-words text-left">...</span>
    </div>
    <ArrowRight size="15" />
  </a>
</div>

<script>
  function togglePrevPageControl(isVisible: boolean) {
    const prevPage = document.getElementById("prev-page");
    if (prevPage) {
      prevPage.classList.toggle("hidden", !isVisible);
    }
  }

  function toggleNextPageControl(isVisible: boolean) {
    const nextPage = document.getElementById("next-page");
    if (nextPage) {
      nextPage.classList.toggle("hidden", !isVisible);
    }
  }

  function findNextLink(
    activeElement: Element,
    stopElement: Element | null = null
  ): Element | null {
    const parent = activeElement.parentElement;

    if (activeElement === stopElement || !parent) {
      return null;
    }

    const childElements = parent.children;
    let activeElementFound = false;

    for (let i = 0; i < childElements.length; ++i) {
      if (childElements[i] === activeElement) {
        activeElementFound = true;
        continue;
      }

      if (!activeElementFound) {
        continue;
      }

      if (childElements[i].tagName === "A") {
        return childElements[i];
      }

      const childLinkElement = childElements[i].querySelector("a");

      if (childLinkElement) {
        return childLinkElement;
      }
    }

    return findNextLink(parent, stopElement);
  }

  function findPrevLink(
    activeElement: Element,
    stopElement: Element | null = null
  ): Element | null {
    const parent = activeElement.parentElement;

    if (activeElement === stopElement || !parent) {
      return null;
    }

    const childElements = parent.children;

    let activeElementIndex = -1;

    for (let i = 0; i < childElements.length; ++i) {
      if (childElements[i] === activeElement) {
        activeElementIndex = i;
        break;
      }
    }

    for (let i = activeElementIndex - 1; i >= 0; --i) {
      if (childElements[i].tagName === "A") {
        return childElements[i];
      }

      const childLinkElements = childElements[i].querySelectorAll("a");

      if (childLinkElements.length > 0) {
        return childLinkElements[childLinkElements.length - 1];
      }
    }

    return findPrevLink(parent, stopElement);
  }

  function setNextLink(navElement: Element | null | undefined) {
    const navLink = navElement as HTMLAnchorElement;

    if (navLink) {
      const nextPage = document.getElementById("next-page");
      const nextPageText = document.querySelector("#next-page span.page-name");

      if (nextPage && nextPageText) {
        nextPage.setAttribute("href", navLink.href);
        nextPageText.textContent =
          navLink.getAttribute("aria-label") || navLink.textContent;
      }
    } else {
      toggleNextPageControl(false);
    }
  }

  function setPrevLink(navElement: Element | null | undefined) {
    const navLink = navElement as HTMLAnchorElement;

    if (navLink) {
      const prevPage = document.getElementById("prev-page");
      const prevPageText = prevPage?.querySelector("span.page-name");

      if (prevPage && prevPageText) {
        prevPage.setAttribute("href", navLink.href);
        prevPageText.textContent =
          navLink.getAttribute("aria-label") || navLink.textContent;
      }
    } else {
      togglePrevPageControl(false);
    }
  }

  function setReadControls() {
    toggleNextPageControl(true);
    togglePrevPageControl(true);

    const navElement = document.getElementById("nav");
    const activeLink = document.querySelector("#nav a.active");

    if (navElement && activeLink) {
      const nextLink = findNextLink(activeLink, navElement);
      const prevLink = findPrevLink(activeLink, navElement);

      setNextLink(nextLink);
      setPrevLink(prevLink);
    } else {
      togglePrevPageControl(false);
      setNextLink(navElement?.querySelector("a"));
    }
  }

  document.addEventListener("nav:active-link-set", setReadControls);
</script>
